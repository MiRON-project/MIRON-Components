//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "PlannerWaypointsQueryServiceAnswHandler.hh"
#include "ComponentWebotsPlanner.hh"

PlannerWaypointsQueryServiceAnswHandler::PlannerWaypointsQueryServiceAnswHandler(IQueryServer *server)
    : PlannerWaypointsQueryServiceAnswHandlerCore(server)
{
}

void PlannerWaypointsQueryServiceAnswHandler::on_update_from(const StaticGlobalPlanner* staticGlobalPlanner)
{
    // update triggered from StaticGlobalPlanner
    // (use a local mutex here, because this method is called from within the thread of StaticGlobalPlanner)
}

void PlannerWaypointsQueryServiceAnswHandler::handleQuery(const Smart::QueryIdPtr &id, const CommNavigationObjects::CommPlannerGoal& request)
{
  //COMP->mRobotMutex.acquire();
  /*
  std::cout << "\n===\n===\nhandleQUERYPLANNER\n====\n==\n";
  auto path = COMP->staticGlobalPlanner->PlannerGoalServiceIn(request).getPaths();
  
  std::vector<CommNavigationObjects::CommPlannerGoal> goals;
  for (auto& node : path.getNodesCopy()) {
    CommNavigationObjects::CommPlannerGoal goal;
    goal.setXGoalPoint(node.getX());
    goal.setYGoalPoint(node.getY());
    goal.setId(node.getId());
    goals.push_back(goal);
  }
  */
  CommNavigationObjects::CommWaypoints answer;
  //answer.setGoals(goals);
  this->server->answer(id, answer);
  //COMP->mRobotMutex.release();
}
