//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "DistanceToGoalServiceInHandler.hh"

#include <iostream>

DistanceToGoalServiceInHandler::DistanceToGoalServiceInHandler(Smart::InputSubject<CommNavigationObjects::DistanceToGoal> *subject, const int &prescaleFactor)
:	DistanceToGoalServiceInHandlerCore(subject, prescaleFactor)
{
	std::cout << "constructor DistanceToGoalServiceInHandler\n";
}
DistanceToGoalServiceInHandler::~DistanceToGoalServiceInHandler() 
{
	std::cout << "destructor DistanceToGoalServiceInHandler\n";
}

void DistanceToGoalServiceInHandler::on_DistanceToGoalServiceIn(const CommNavigationObjects::DistanceToGoal &input)
{
	// implement business logic here
	// (do not use blocking calls here, otherwise this might block the InputPort DistanceToGoalServiceIn)
	static bool first_execution = true;
	double current_value = input.getL1();
	if(first_execution || (!first_execution && previous_value != current_value))
	{
		try
		{
			RoqmeDDSTopics::RoqmeDoubleContext distanceContext;
			distanceContext.name("DistanceToGoal");
			distanceContext.value().push_back(input.getL1());
			distanceContext.value().push_back(input.getL2());

			distanceWriter.write(distanceContext);
#ifndef ROQME_DEBUG
			unsigned long long now = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
			std::cout << now << " - DistanceToGoal - " << distanceContext.value().at(0) << ", " << distanceContext.value().at(1) << std::endl;
#endif
			previous_value = current_value;
			first_execution = false;
		}
		catch(Roqme::RoqmeDDSException& e)
		{
			std::cerr << e.what() << std::endl;
		}
	}
}
