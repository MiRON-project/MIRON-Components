//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "PayloadServiceInHandler.hh"

#include <iostream>

PayloadServiceInHandler::PayloadServiceInHandler(Smart::InputSubject<CommBasicObjects::RobotPayload> *subject, const int &prescaleFactor)
:	PayloadServiceInHandlerCore(subject, prescaleFactor)
{
	std::cout << "constructor PayloadServiceInHandler\n";
}
PayloadServiceInHandler::~PayloadServiceInHandler() 
{
	std::cout << "destructor PayloadServiceInHandler\n";
}

void PayloadServiceInHandler::on_PayloadServiceIn(const CommBasicObjects::RobotPayload &input)
{
	// implement business logic here
	// (do not use blocking calls here, otherwise this might block the InputPort PayloadServiceIn)
	double mass = input.getMass();
	const unsigned int num_items = input.getNumber_of_items();

	static bool first_execution = true;
	std::string current_available;
	std::string current_payload;

/*
 *  //static double acc_mass = mass;
	//static double prev_mass = -1;
if(prev_mass > mass or prev_mass < mass)
{
		prev_mass = mass;

		std::cout << "1.- mass: " << mass << std::endl;
		if (mass > 0.1)
		{
			acc_mass += mass + 1.5;
			mass = acc_mass;
		}
		std::cout << "2.- mass: " << mass << std::endl;
*/
	if(mass >= 4 && mass <= MAX_MASS) {
		current_payload = "HIGH";
	}
	else if (mass >= 2) {
		current_payload = "HALF";
	}
	else{
		current_payload = "LOW";
	}

	if(first_execution || (!first_execution && prev_payload.compare(current_payload)))
	{
		try {
			RoqmeDDSTopics::RoqmeEnumContext payloadContext;
			payloadContext.name("PayLoadWeight");
			payloadContext.value().push_back(current_payload);
			payload_weight_dw.write(payloadContext);
#ifdef ROQME_DEBUG
			roqmeOut.roqmeDebug(Roqme::RoqmeDebug::ContextType::ENUM, "PayLoadWeight", payloadContext.value().at(0));
#else
			unsigned long long now = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
			std::cout << now << " - PayLoadWeight - " << payloadContext.value().at(0) << std::endl;
#endif
			prev_payload = current_payload;
		}
		catch(Roqme::RoqmeDDSException& e)
		{
			std::cerr << e.what() << std::endl;
		}
	}
//}

	//std::cout << "num_items" << num_items << std::endl;
	if(num_items >= MAX_ITEMS){
		current_available= "LOW";
	}
	else if (num_items >= 2){
		current_available= "HALF";
	}
	else{
		current_available = "HIGH";
	}

	if(first_execution || (!first_execution && prev_available.compare(current_available)))
	{
		RoqmeDDSTopics::RoqmeEnumContext availableSpaceContext;
		availableSpaceContext.name("AvailableSpace");
		availableSpaceContext.value().push_back(current_available);
		available_space_dw.write(availableSpaceContext);
#ifdef ROQME_DEBUG
		roqmeOut.roqmeDebug(Roqme::RoqmeDebug::ContextType::ENUM, "AvailableSpace", availableSpaceContext.value().at(0));
#else
		unsigned long long now = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
		std::cout << now << " - AvailableSpace - " << availableSpaceContext.value().at(0)  << availableSpaceContext.value().size()<< std::endl;
#endif
		prev_available = current_available;
	}
	first_execution = false;

}
