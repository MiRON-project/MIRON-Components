//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "PayloadServiceInHandler.hh"

#include <iostream>

PayloadServiceInHandler::PayloadServiceInHandler(Smart::InputSubject<CommBasicObjects::RobotPayload> *subject, const int &prescaleFactor)
:	PayloadServiceInHandlerCore(subject, prescaleFactor)
{
	std::cout << "constructor PayloadServiceInHandler\n";
}
PayloadServiceInHandler::~PayloadServiceInHandler() 
{
	std::cout << "destructor PayloadServiceInHandler\n";
}

void PayloadServiceInHandler::on_PayloadServiceIn(const CommBasicObjects::RobotPayload &input)
{
	// implement business logic here
	// (do not use blocking calls here, otherwise this might block the InputPort PayloadServiceIn)
	const double mass = input.getMass();
	const unsigned int num_items = input.getNumber_of_items();

	//std::cout << __LINE__ << " : " << __FILE__ << " => " << mass << ", " << num_items << std::endl;

	try {

		RoqmeDDSTopics::RoqmeEnumContext payloadContext, availableSpaceContext;
		payloadContext.name("PayLoadWeight");

		if(mass >= 4 && mass <= MAX_MASS) {
			payloadContext.value().push_back("HIGH");
		}
		else if (mass == 3) {
			payloadContext.value().push_back("HALF");
		}
		else{
			payloadContext.value().push_back("LOW");
		}

		availableSpaceContext.name("AvailableSpace");
		if(num_items == MAX_ITEMS){
			availableSpaceContext.value().push_back("LOW");
		}
		else if (num_items == 2){
			availableSpaceContext.value().push_back("HALF");
		}
		else{
			availableSpaceContext.value().push_back("HIGH");
		}

		unsigned long long now = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
		std::cout << now << " - PayLoadWeight - " << payloadContext.value().at(0) << std::endl;
		std::cout << now << " - AvailableSpace - " << availableSpaceContext.value().at(0) << std::endl;


		payload_weight_dw.write(payloadContext);
		available_space_dw.write(availableSpaceContext);
	}
	catch(Roqme::RoqmeDDSException& e)
	{
		std::cerr << e.what() << std::endl;
	}
}
