//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "PeoplePushServiceInHandler.hh"

#include <iostream>

PeoplePushServiceInHandler::PeoplePushServiceInHandler(Smart::InputSubject<CommObjectRecognitionObjects::CommPeople> *subject, const int &prescaleFactor)
:	PeoplePushServiceInHandlerCore(subject, prescaleFactor)
{
	std::cout << "constructor PeoplePushServiceInHandler\n";
}
PeoplePushServiceInHandler::~PeoplePushServiceInHandler() 
{
	std::cout << "destructor PeoplePushServiceInHandler\n";
}

void PeoplePushServiceInHandler::on_PeoplePushServiceIn(const CommObjectRecognitionObjects::CommPeople &input)
{
	// implement business logic here
	// (do not use blocking calls here, otherwise this might block the InputPort PeoplePushServiceIn)

	static bool first_execution = true;
	std::string current_value;

	const size_t &peopleSize = input.getPeopleSize();

	if(peopleSize >= 3) {
		current_value = "FULL";
	}
	else if (peopleSize >= 1) {
		current_value = "HALF";
	}
	else {
		current_value = "EMPTY";
	}

	if(first_execution || (!first_execution && prev_value.compare(current_value)))
	{
		try
		{
			RoqmeDDSTopics::RoqmeEnumContext peopleContext;
			peopleContext.name("PeopleInRoom");
			peopleContext.value().push_back(current_value);

			peopleWriter.write(peopleContext);

#ifdef ROQME_DEBUG
			roqmeOut.roqmeDebug(Roqme::RoqmeDebug::ContextType::ENUM, "PeopleInRoom", peopleContext.value().at(0));
#else
			unsigned long long now = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
			std::cout << now << " - PeopleInRoom - " << peopleContext.value().at(0) << std::endl;
#endif
			prev_value = current_value;
			first_execution = false;
		}
		catch(Roqme::RoqmeDDSException& e)
		{
			std::cerr << e.what() << std::endl;
		}
	}
}
