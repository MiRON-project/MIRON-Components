(realize-tcb (getPersonPose ?personname => ?x ?y ?z ?result)
	(module "objRecognitionModule")
	(action (	
    (format t "===== getPersonPose~%")	
    (format t "getPersonPose: name Query ~A~%" '?personname)
    (let  
      ((personpose (tcl-query :server 'personrecog  
                             :service 'personquery
                             :request '?personname)))
      (tcl-bind-var :name '?x :value (third personpose))
      (tcl-bind-var :name '?y :value (fourth personpose))
      (tcl-bind-var :name '?z :value (fifth personpose))
      (cond 
        ((string-equal "NIL" (second personpose))  
          (tcl-bind-var :name '?result :value 'ERROR))
        (T
          (tcl-bind-var :name '?result :value 'SUCCESS))
      )
    )
    '(SUCCESS (OK)))
  )
)

(defun show-people ()
  (let ((obj-list (tcl-kb-query-all :key '(is-a) :value '((is-a person)))))
    (dolist (obj obj-list)
      (format t "~%--------------------------------~%")
      (format t "  id                    : ~s ~%" (get-value obj 'id))
      (format t "  name                  : ~s ~%" (get-value obj 'name))
      (format t "  pose                  : ~s ~%" (get-value obj 'pose))
    )
  )
) 

(realize-tcb (recognize-people)
  (module "objRecognitionModule")
  (action (
    (format t "=========================>>> tcb-recognize-people ~%")
    '(SUCCESS ())
    )
  )
  (plan (
    (peoplerecognition => ?people)
    (tcb-store-people-in-kb ?people)
    )
  )
)

(realize-tcb (peoplerecognition => ?people)
  (module "objRecognitionModule")
  (action (
    (format t "=========================>>> peoplerecognition ~%")
    (tcl-activate-event 
      :name 'evt-personrecogpeoplerecognition
      :handler 'handler-people-recognition
      :server 'personrecog 
      :service 'peoplerecognitionevent
      :mode 'continuous)
    '(SUCCESS ())
    )
  )
)

(define-event-handler (handler-people-recognition)
  (action (
            (format t "=========================>>> HANDLER PEOPLE RECOGNIZED ~s ~%~%" (tcl-event-message))
            (tcl-bind-var :name '?people :value (read-from-string (tcl-event-message)))
            (tcl-abort)
          )
  )
)

(realize-tcb (tcb-store-people-in-kb ?people)
	(module "objRecognitionModule")
  	(action (
            (let* (
                  (objs '?people)
                  (obj nil)
                  (name nil)
                  (pose nil))
              (dolist (id objs)
                (setf obj (tcl-query :server 'personrecog 
                                     :service 'personquery
                                     :request id))
                (setf name (second obj))
                (setf pose (list (third obj) (fourth obj) (fifth obj)))
                (tcl-kb-update 
                  :key '(is-a id) 
                  :value `(
                          (is-a PERSON)
                              (id ,id)
                              (name ,name)
                              (pose ,pose)
                          )
                )
              )
            )
            '(SUCCESS ())
            )
      )
)        