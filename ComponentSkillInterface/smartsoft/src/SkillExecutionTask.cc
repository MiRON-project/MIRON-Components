//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C)	2018 Matthias Lutz
//
//      ZAFH Servicerobotic Ulm
//      Christian Schlegel
//      University of Applied Sciences
//      Prittwitzstr. 10
//      89075 Ulm
//      Germany
//
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------


#include "SkillExecutionTask.hh"
#include "ComponentSkillInterface.hh"
#include "SkillKbParser.hh"

#include <iostream>
#include <thread>
#include <chrono>

#include <QtCore>

SkillExecutionTask::SkillExecutionTask(SmartACE::SmartComponent *comp) 
:	SkillExecutionTaskCore(comp)
{
	std::cout << "constructor SkillExecutionTask\n";
	shutdown = false;
}
SkillExecutionTask::~SkillExecutionTask() 
{
	std::cout << "destructor SkillExecutionTask\n";
}

void SkillExecutionTask::unblockToShutdown(){
	std::cout<<"["<<__FUNCTION__<<"] "<<std::endl;

	shutdown = true;
	cond.notify_one();
}

void SkillExecutionTask::pushMsg(std::string msg){
	std::unique_lock<std::mutex> lock(msgMutex);
	msgQueue.push(msg);
	lock.unlock();
	cond.notify_one();
}

std::string SkillExecutionTask::popMsg(){
	std::string res;
	if(shutdown == true){
		res = "";
		return res;
	}
	std::unique_lock<std::mutex> lock(msgMutex);
	while (msgQueue.empty())
	{
			cond.wait(lock);
	}
	if(shutdown == true){
		std::cout<<"["<<__FUNCTION__<<"] "<<"Shutdown case"<<std::endl;
		res = "";
	} else {
		res = this->msgQueue.front();
		this->msgQueue.pop();
	}
	return res;
}

int SkillExecutionTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}

int SkillExecutionTask::on_execute()
{
	std::string inputMSG = this->popMsg();
	QJsonParseError error;
	QString line = QString::fromUtf8(inputMSG.c_str());
	QJsonDocument doc = QJsonDocument::fromJson(line.toUtf8(),&error);
	if(QJsonParseError::NoError != error.error)
	{
		std::cout<< "error: parsing json error:" << error.errorString().
			toStdString() << std::endl;
		return 0;
	}
	
	auto parsed_json = ParsedSkillDefinition(doc);
	std::cout << "Msg type: " << parsed_json.msg_type << "\n";

	if(parsed_json.msg_type == "push-skill")
	{
		std::string message;
		CommBasicObjects::CommKBRequest request;
		CommBasicObjects::CommKBResponse answer;

		message = generateSkillKBMsg(parsed_json.skill_name, parsed_json.id,
			parsed_json.in, parsed_json.out);
		request.setRequest(message);
		COMP->kBQueryClient->query(request, answer);
		std::cout << "[SkillExecutionTask]" << " EXECSKILL - id: " << 
			parsed_json.id << "\n name: " << parsed_json.skill_name <<
			"\n fqn: " << parsed_json.skill_definition << "\n"; 
		
		std::cout << "Waiting for skill execution to finish..." << std::endl;
		while(true)
		{
			request.setRequest(SKILL_RESULT);
			COMP->kBQueryClient->query(request, answer);
			std::string answer_skill = parseKBSkillName(answer.getResponse());
			int skill_id = parseKBSkillId(answer.getResponse());
			if (stringCompareInsensitive(answer_skill, parsed_json.skill_name) &&
				skill_id == parsed_json.id) {
				auto ports_name = parseKBMsg(answer.getResponse());
				parsed_json.result = parseKBSkillResult(answer.getResponse());
				break;
			}
			std::this_thread::sleep_for(std::chrono::seconds(1));
		}
		request.setRequest(SKILL_RESULT_NIL);
		COMP->kBQueryClient->query(request,answer);
		std::cout<<"Got KB Query Answer: " << answer.getResponse() 
			<< std::endl;

		COMP->com->send(parsed_json.parseResult());

	} // "push-skill"
	
	else if (parsed_json.msg_type == "abort-current-running-skill")
	{
		std::cout<<"[SkillExecutionTask]"<<" abort current running skill"<<std::endl;
		{
//		{ "msg-type" : "abort-current-running-skill-result", "result" : "SUCCESS"}

		QJsonObject root;
		root["msg-type"] = "abort-current-running-skill-result";
		root["result"] = "SUCCESS";
		QJsonDocument answer(root);

		QString jsonAnsw = answer.toJson(QJsonDocument::Compact);
		COMP->com->send(jsonAnsw.toStdString());

		}

		//{ "msg-type" : "abort-current-running-skill" }

		//TODO impl abort current skill
	} 
	
	else if (parsed_json.msg_type == "abort-skill")
	{

//		{ "msg-type" : "abort-skill" , "id" : 2 }
		{
//		{ "msg-type" : "abort-skill-result", "id" : 2, "result" : "SUCCESS"}

		QJsonObject root;
		root["msg-type"] = "abort-skill-result";
		root["id"] = parsed_json.id;
		root["result"] = "SUCCESS";
		QJsonDocument answer(root);

		QString jsonAnsw = answer.toJson(QJsonDocument::Compact);
		COMP->com->send(jsonAnsw.toStdString());
		}


	} else {
		std::cout<<"Other msg type found --> skip"<<std::endl;
	}

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int SkillExecutionTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}